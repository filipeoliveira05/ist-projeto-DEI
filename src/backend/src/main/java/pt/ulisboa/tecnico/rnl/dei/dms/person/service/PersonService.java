package pt.ulisboa.tecnico.rnl.dei.dms.person.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pt.ulisboa.tecnico.rnl.dei.dms.exceptions.DEIException;
import pt.ulisboa.tecnico.rnl.dei.dms.exceptions.ErrorMessage;
import pt.ulisboa.tecnico.rnl.dei.dms.person.domain.Person;
import pt.ulisboa.tecnico.rnl.dei.dms.person.dto.PersonDto;
import pt.ulisboa.tecnico.rnl.dei.dms.person.repository.PersonRepository;
@Service
@Transactional
public class PersonService {

	@Autowired
	private PersonRepository personRepository;

	private Person fetchPersonOrThrow(long id) {
		return personRepository.findById(id)
				.orElseThrow(() -> new DEIException(ErrorMessage.NO_SUCH_PERSON, Long.toString(id)));
	}

	@Transactional
	public List<PersonDto> getPeople() {
		return personRepository.findAll().stream()
				.map(PersonDto::new)
				.toList();
	}

	private void validatePerson(PersonDto personDto) {
		if (personDto.name() == null || personDto.name().isBlank()) {
			throw new DEIException(ErrorMessage.PERSON_NAME_NOT_VALID);
		}

		if (personDto.istId() == null || personDto.istId().isBlank()) {
			throw new DEIException(ErrorMessage.IST_ID_NOT_VALID);
		}

		// TODO: maybe validate type?

		// TODO: test if email verification is working
		if (personDto.email() == null || personDto.email().isBlank() || !personDto.email().matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
			throw new DEIException(ErrorMessage.EMAIL_NOT_VALID);
		}

		// TODO: maybe validate status?

		// TODO: test if phone verification is working
		if (personDto.phoneNumber() == null || personDto.phoneNumber().isBlank() || !personDto.phoneNumber().matches("^[0-9]{9}$")) {
			throw new DEIException(ErrorMessage.PHONE_NUMBER_NOT_VALID);
		}

		if (personRepository.findByIstId(personDto.istId()).isPresent()) {
			throw new DEIException(ErrorMessage.DUPLICATE_IST_ID, personDto.istId());
		}

		if (personRepository.findByEmail(personDto.email()).isPresent()) {
			throw new DEIException(ErrorMessage.DUPLICATE_EMAIL, personDto.email());
		}

		if (personRepository.findByPhoneNumber(personDto.phoneNumber()).isPresent()) {
			throw new DEIException(ErrorMessage.DUPLICATE_PHONE_NUMBER, personDto.phoneNumber());
		}

	}

	@Transactional
	public PersonDto createPerson(PersonDto personDto) {
		validatePerson(personDto);

		Person person = new Person(personDto);
		person.setId(null); // to ensure that the id is generated by the database
		return new PersonDto(personRepository.save(person));
	}

	@Transactional
	public PersonDto getPerson(long id) {
		return new PersonDto(fetchPersonOrThrow(id));
	}

	public List<PersonDto> getPeopleByType(String type) {
		return personRepository.findByType(Person.PersonType.valueOf(type.toUpperCase())).stream()
				.map(PersonDto::new)
				.toList();
	}

	@Transactional
	public PersonDto updatePerson(long id, PersonDto personDto) {
		// FIXME: hmmm, updatePerson and createPerson are very similar
		// maybe we should refactor this? have a
		// `private PersonDto something(Long id, PersonDto personDto)` method?
		// ...or maybe not...

		Person person = fetchPersonOrThrow(id);
		person.updateFromDto(personDto);
		return new PersonDto(personRepository.save(person));
	}

	@Transactional
	public void deactivatePerson(long id) {
		Person person = fetchPersonOrThrow(id);
		person.setStatus(false);
		personRepository.save(person);
	}

	@Transactional
	public void deletePerson(long id) {
		fetchPersonOrThrow(id); // ensure exists

		personRepository.deleteById(id);
	}
}
